apply plugin: 'com.android.library'
// We no longer use it on Android Studio 4.0,
// but still keep the relevant code for reference.
//apply plugin: 'com.novoda.bintray-release'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion


    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29

        consumerProguardFiles 'consumer-rules.pro'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    resourcePrefix "poweract_"

    //region Packing copyright into release aar.
    // https://stackoverflow.com/questions/45846957/android-how-can-i-include-a-licence-txt-file-in-aar
    // https://stackoverflow.com/questions/51433769/why-android-gradle-maven-publish-artifact-bundlerelease-not-found
    def libraryModuleName = 'poweract'
    def outputAarDir = rootProject.file('/library/build/outputs/aar')
    def outputAarUnzippedDir = rootProject.file('/library/build/outputs/aar/unzipped')
    def aarReleaseFilename = libraryModuleName + '-release.aar'
    def aarReleaseFile = rootProject.file('/library/build/outputs/aar/' + aarReleaseFilename)

    task unzipAar(type: Copy) {
        delete(outputAarUnzippedDir)
        from zipTree(aarReleaseFile)
        into outputAarUnzippedDir
    }

    task addLicenseFileInUnzipedAar(type: Copy, dependsOn: 'unzipAar') {
        def fromDir = rootProject.file(File.separator)
        from fromDir
        into outputAarUnzippedDir
        include 'NOTICE.txt'
    }

    task reZipAar(type: Zip, dependsOn: 'addLicenseFileInUnzipedAar') {
        from outputAarUnzippedDir
        include '**'
        archiveName aarReleaseFilename
        destinationDir(outputAarDir)
    }

    afterEvaluate {
        bundleReleaseAar.finalizedBy(reZipAar)
    }
    //endregion
}

dependencies {
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation project(':test-resource')
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    compileOnly 'androidx.annotation:annotation:1.1.0'
    compileOnly project(':hidden-api')
}

// gradlew clean build bintrayUpload -PbintrayUser=BINTRAY_USERNAME -PbintrayKey=BINTRAY_KEY -PdryRun=false
//publish {
//    userOrg = 'ryuunoakaihitomi'
//    groupId = 'github.ryuunoakaihitomi.poweract'
//    artifactId = 'poweract'
//    publishVersion = '1.0.5'
//    desc = 'An Android library that can manipulate power-related actions with just few lines of code.'
//    website = 'https://github.com/ryuunoakaihitomi/PowerAct'
//}

// ------- Generate javadoc manually.
// Upload Files: Rename: poweract-<ver>-javadoc.jar -> Target Path: /github/ryuunoakaihitomi/poweract/poweract/<ver>
// Enable javadoc task in project's build.gradle before run task.

apply from: 'bintray-release.gradle'
