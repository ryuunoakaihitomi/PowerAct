apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion


    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        consumerProguardFiles 'consumer-rules.pro'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        // "In order to use core library desugaring, please enable multidex."
        //multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }

    compileOptions {
        //coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    resourcePrefix "poweract_"

    //region Packing copyright into release aar.
    // https://stackoverflow.com/questions/45846957/android-how-can-i-include-a-licence-txt-file-in-aar
    // https://stackoverflow.com/questions/51433769/why-android-gradle-maven-publish-artifact-bundlerelease-not-found
    def libraryModuleName = 'poweract'
    def outputAarDir = rootProject.file('/library/build/outputs/aar')
    def outputAarUnzippedDir = rootProject.file('/library/build/outputs/aar/unzipped')
    def aarReleaseFilename = libraryModuleName + '-release.aar'
    def aarReleaseFile = rootProject.file('/library/build/outputs/aar/' + aarReleaseFilename)

    task unzipAar(type: Copy) {
        delete(outputAarUnzippedDir)
        from zipTree(aarReleaseFile)
        into outputAarUnzippedDir
    }

    task addLicenseFileInUnzipedAar(type: Copy, dependsOn: 'unzipAar') {
        def fromDir = rootProject.file(File.separator)
        from fromDir
        into outputAarUnzippedDir
        include 'NOTICE.txt'
    }

    task reZipAar(type: Zip, dependsOn: 'addLicenseFileInUnzipedAar') {
        from outputAarUnzippedDir
        include '**'
        archiveName aarReleaseFilename
        destinationDir(outputAarDir)
    }

    afterEvaluate {
        bundleReleaseAar.finalizedBy(reZipAar)
    }
    //endregion
}

dependencies {
    final def awaitility_version = '4.0.3'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    // Only for Awaitility (requires Java 8+ since 4.0.0-rc1)
    // androidTestCoreLibraryDesugaring ?
    //coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.10'
    androidTestImplementation("org.awaitility:awaitility:$awaitility_version") {
        exclude group: 'org.hamcrest'
    }
    androidTestImplementation project(':test-resource')
    androidTestImplementation "com.github.topjohnwu.libsu:core:$libsu_version"
    androidTestImplementation "rikka.shizuku:api:$shizuku_version"
    androidTestImplementation "rikka.shizuku:provider:$shizuku_version"
    // https://stackoverflow.com/a/7878281
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'junit:junit:4.13.1'
    testImplementation "org.awaitility:awaitility:$awaitility_version"

    compileOnly 'androidx.annotation:annotation:1.1.0'
    compileOnly project(':hidden-api')

    /* ------- OPTIONAL DEPENDENCIES ------- */
    compileOnly "com.github.topjohnwu.libsu:core:$libsu_version"
    compileOnly "rikka.shizuku:api:$shizuku_version"
    compileOnly "rikka.shizuku:provider:$shizuku_version"
}

apply from: 'maven-release.gradle'
