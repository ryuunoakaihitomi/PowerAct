import java.nio.charset.StandardCharsets
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime

apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion


    defaultConfig {
        applicationId "demo.power_act"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode Integer.valueOf(LocalDate.now().toString().replaceAll('[^0-9]', '') + LocalTime.now().hour)
        versionName PROJ_VERSION

        buildConfigField "long", "BUILD_TIME", String.valueOf(System.currentTimeMillis() + "L")
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    // Test uploaded aar release.
//    implementation 'github.ryuunoakaihitomi.poweract:poweract:latest.release'
    // Test aar release.
//    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    // Developing mode
    implementation project(':library')
    // Export APK contains test res.
//    implementation project(':test-resource')

    // debugImplementation because LeakCanary should only run in debug builds.
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'

    /* Optional dependencies, we can use these to make PowerActX faster. */
    implementation "com.github.topjohnwu.libsu:core:$libsu_version"
    implementation "rikka.shizuku:api:$shizuku_version"
    implementation "rikka.shizuku:provider:$shizuku_version"
}

// Format APK filename
android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "PowerActDemo_${Base64.encoder.encodeToString(LocalDateTime.now().toString().getBytes(StandardCharsets.UTF_8))}_${variant.buildType.name}.apk"
    }
}
